rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
 
    match /animal/{animalId} {
        allow read: if true;
        allow write: if true;
    }

    match /grocerylist/{listId} {

        function canCreate(request) {
            let doc = request.resource.data;
            let auth = request.auth;
            let isOwner = request.auth.uid == doc.id;
            let isVersion1 = doc.version == '1';
            let createdNow = doc.createdOn == request.time;
            let ownerIdMatches = doc.owner.uid == request.auth.uid;
            let ownerNameMatches = doc.get(['owner', 'name'], -1) ==
                auth.token.get('name', -1);
            let ownerEmailAddressMatches = doc.get(['owner', 'email', 'address'], -1) ==
                auth.token.get('email', -1);
            let ownerEmailVerifiedMatches = doc.get(['owner', 'email', 'verified'], -1) ==
                auth.token.get('email_verified', -1);
            let membersEmpty = doc.members.size() == 0;
            return (isOwner &&
                isVersion1 &&
                createdNow &&
                ownerIdMatches &&
                ownerNameMatches &&
                ownerEmailAddressMatches &&
                ownerEmailVerifiedMatches &&
                membersEmpty);
        }

        function canRead(request, resource) {
            let isOwner = request.auth.uid == resource.data.id;
            let isMember = request.auth.token.memberOf == resource.id;
            return isOwner || isMember;
        }

        function canDelete() {
            return false;
        }

        function canUpdate() {
            return false;
        }

        allow create: if canCreate(request);
        allow read: if canRead(request, resource);
        allow delete: if canDelete();
        allow update: if canUpdate();
    }
  }
}
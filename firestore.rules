rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
 
function isLoggedIn(request) {
    return request.auth.uid != null;
}
function stringsExactlyEqual(a, b) {
    return a == b;
}

    match /animal/{animalId} {
        allow read: if true;
        allow write: if true;
    }

    match /list/{listId} {

    function emailMatchesUserToken(request) {
        let tokenHasEmail = request.auth.token.keys().hasAny(['email']) &&
            request.auth.token.email != null;
        let dataHasEmail = request.resource.data.owner.keys().hasAny(['email']) &&
            request.resource.data.owner.email != null;
        let bothMissingEmail = !tokenHasEmail && !dataHasEmail;
        return (bothMissingEmail ||
            (request.resource.data.owner.email.address == request.auth.token.email &&
                request.resource.data.owner.email.verified ==
                    request.auth.token.email_verified));
    }
    function ownerNameMatchesUserToken(request) {
        let tokenHasName = request.auth.token.keys().hasAny(['name']) &&
            request.auth.token.name != null;
        let dataHasName = request.resource.data.owner.keys().hasAny(['name']) &&
            request.resource.data.owner.name != null;
        let bothMissingName = !tokenHasName && !dataHasName;
        return (bothMissingName ||
            request.resource.data.owner.name == request.auth.token.name);
    }

      allow create: if (request.resource.data.id == request.auth.uid &&
            stringsExactlyEqual(request.resource.data.version, '1') &&
            request.resource.data.createdOn == request.time &&
            request.resource.data.owner.uid == request.auth.uid &&
            emailMatchesUserToken(request) &&
            ownerNameMatchesUserToken(request));

      allow read: if (resource.data.id == request.auth.uid ||
            request.auth.token.memberOf == resource.id);

      allow delete: if false;
      
      allow update: if (request.resource.data.id == request.auth.uid &&
            stringsExactlyEqual(request.resource.data.version, '1') &&
            request.resource.data.createdOn == resource.data.createdOn &&
            request.resource.data.owner.uid == request.auth.uid &&
            (!('owner' in request.resource.data.diff(resource.data).affectedKeys()) ||
                ownerNameMatchesUserToken(request)) &&
            (!('email' in request.resource.data.diff(resource.data).affectedKeys()) ||
                emailMatchesUserToken(request)));
    }
  }
}